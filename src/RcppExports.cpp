// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// build_regression_tree_baysian
NumericMatrix build_regression_tree_baysian(NumericMatrix X, NumericMatrix Y, int max_partition_level, double cor_cutoff, int min_divide_size);
RcppExport SEXP _GNET2_build_regression_tree_baysian(SEXP XSEXP, SEXP YSEXP, SEXP max_partition_levelSEXP, SEXP cor_cutoffSEXP, SEXP min_divide_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type max_partition_level(max_partition_levelSEXP);
    Rcpp::traits::input_parameter< double >::type cor_cutoff(cor_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type min_divide_size(min_divide_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(build_regression_tree_baysian(X, Y, max_partition_level, cor_cutoff, min_divide_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GNET2_build_regression_tree_baysian", (DL_FUNC) &_GNET2_build_regression_tree_baysian, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_GNET2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
